{"ast":null,"code":"import _classCallCheck from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/components/BadgeForm.js\";\nimport React from 'react';\n\nvar badgeForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(badgeForm, _React$Component);\n\n  function badgeForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, badgeForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(badgeForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleChange = function (e) {\n      //onChange y se maneja con un método de la clase this.handleChange\n      //  console.log({\n      //      name: e.target.name,\n      //      value: e.target.value,\n      //  });\n      _this.setState({\n        //Para guardar la información en el estado se usa una función de la clase component llamada setState a la cual se le debe pasar un objeto con la información que se quiere guardar.\n        firstName: e.target.value\n      });\n    };\n\n    _this.handleClick = function (e) {\n      //manejador del evento al escribir \n      console.log(\"Button was clicked\");\n    };\n\n    _this.handleSubmit = function (e) {\n      //manejador de evento al hacer click, Los elementos button también tienen un evento que es onClick.\n      e.preventDefault();\n      console.log(\"form was submitted\");\n    };\n\n    return _this;\n  }\n\n  _createClass(badgeForm, [{\n    key: \"render\",\n    //Cuando hay un botón dentro de un formulario, este automáticamente será de \n    //tipo submit. Si no queremos que pase así hay dos maneras de evitarlo: especificando que su valor es de tipo button o manejándolo \n    //desde el formulario cuando ocurre el evento onSubmit.\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"New Attendant\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(\"input\", {\n        onChange: this.handleChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"fisrtName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Save\")));\n    }\n  }]);\n\n  return badgeForm;\n}(React.Component);\n\nexport default badgeForm;","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/components/BadgeForm.js"],"names":["React","badgeForm","handleChange","e","setState","firstName","target","value","handleClick","console","log","handleSubmit","preventDefault","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;;;;;;;;;;;;;;UACFC,Y,GAAe,UAAAC,CAAC,EAAI;AAAE;AACtB;AACA;AACA;AACA;AACA,YAAKC,QAAL,CAAc;AAAE;AACZC,QAAAA,SAAS,EAAEF,CAAC,CAACG,MAAF,CAASC;AADV,OAAd;AAGC,K;;UAEDC,W,GAAc,UAAAL,CAAC,EAAI;AAAE;AACjBM,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,K;;UAEDC,Y,GAAe,UAAAR,CAAC,EAAI;AAAE;AACrBA,MAAAA,CAAC,CAACS,cAAF;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEA,K;;;;;;;AACR;AACA;AACA;6BACY;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAM,QAAA,QAAQ,EAAE,KAAKC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADY,EAEZ;AAAO,QAAA,QAAQ,EAAE,KAAKT,YAAtB;AAAoC,QAAA,SAAS,EAAC,cAA9C;AAA6D,QAAA,IAAI,EAAC,MAAlE;AAAyE,QAAA,IAAI,EAAC,WAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFY,CADJ,EAMI;AAAQ,QAAA,OAAO,EAAE,KAAKM,WAAtB;AAAmC,QAAA,SAAS,EAAE,iBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,CAFJ,CADJ;AAaH;;;;EArCmBR,KAAK,CAACa,S;;AAwC9B,eAAeZ,SAAf","sourcesContent":["import React from 'react'\n\nclass badgeForm extends React.Component {\n    handleChange = e => { //onChange y se maneja con un método de la clase this.handleChange\n    //  console.log({\n    //      name: e.target.name,\n    //      value: e.target.value,\n    //  });\n    this.setState({ //Para guardar la información en el estado se usa una función de la clase component llamada setState a la cual se le debe pasar un objeto con la información que se quiere guardar.\n        firstName: e.target.value,\n    })\n    };\n\n    handleClick = e => { //manejador del evento al escribir \n        console.log(\"Button was clicked\");\n       };\n\n       handleSubmit = e => { //manejador de evento al hacer click, Los elementos button también tienen un evento que es onClick.\n        e.preventDefault();\n        console.log(\"form was submitted\");\n        \n       };\n//Cuando hay un botón dentro de un formulario, este automáticamente será de \n//tipo submit. Si no queremos que pase así hay dos maneras de evitarlo: especificando que su valor es de tipo button o manejándolo \n//desde el formulario cuando ocurre el evento onSubmit.\n    render(){\n        return (\n            <div>\n                <h1>New Attendant</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n        <label>First Name</label>\n        <input onChange={this.handleChange} className=\"form-control\" type=\"text\" name=\"fisrtName\"/>\n                    </div>\n\n                    <button onClick={this.handleClick} className= \"btn btn-primary\">Save</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default badgeForm;\n\n"]},"metadata":{},"sourceType":"module"}