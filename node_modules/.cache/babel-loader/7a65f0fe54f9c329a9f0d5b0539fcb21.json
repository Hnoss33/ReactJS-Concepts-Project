{"ast":null,"code":"var _jsxFileName = \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/index.js\";\n//ESTO ES UN EJEMPLO SIN USAR REACT\n// const  element = document.createElement('h1'); // esto crea un elemento en el H1 \n// element.innerText = \"Hello\"; // aca indicamos que vamos a crear un texto\n// const container = document.getElementById('app');//aca es donde debemos poner esto ya que en el index.html esta el id \n// //como ya tenemos este contenedor hacemos lo siguiente \n// container.appendChild(element)\n// //react es el unico elemento que esta en el html app\n// //react importa al html automaticamente\n// //en el inspector de elementos del chromo veremos unos elementos en el DOM que no estaban antes\n// //entonces 1: tenemos un elemento 2: tenemos un contenedor 3: lo estamos presentando en pantalla\n// //con este ejemplo no estamos usanddo react \n// //ACA USAREMOS LO MISMO USANDO REACT\nimport React from 'react'; //IMPORTAMOS REACT PORQUE VAMOS A UTILIZAR JSX\n\nimport ReactDom from 'react-dom'; // estas dos herramientas de react van a trabajar en conjunto\n//el analogo de estas dos es el create element para el react, y el react DOM es es el analogo a apend child\n\nvar element = React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, \"Hello\"); // este es el elemento y abajo creamos el contenedor\n//Hay una alternativa para la linea de codigo anterior 23 y es:\n// const element = document.createElement('h1',{}, 'hola! soy los children') //esto es lo mismo que arriba y lo que esta en es: {atributo}\n\nvar container = document.getElementById('app'); // ReactDOM.render(__que__, __donde__); // este metodo render toma dos argumentos que y donde lo queremos renderizar\n\nReactDom.render(element, container); // ESTE ES EL ORDEN","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/index.js"],"names":["React","ReactDom","element","container","document","getElementById","render"],"mappings":";AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;;AAEA,IAAMC,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAhB,C,CAAgC;AAChC;AACA;;AACA,IAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAlB,C,CACA;;AACAJ,QAAQ,CAACK,MAAT,CAAgBJ,OAAhB,EAAyBC,SAAzB,E,CAAqC","sourcesContent":["//ESTO ES UN EJEMPLO SIN USAR REACT\n// const  element = document.createElement('h1'); // esto crea un elemento en el H1 \n\n// element.innerText = \"Hello\"; // aca indicamos que vamos a crear un texto\n\n// const container = document.getElementById('app');//aca es donde debemos poner esto ya que en el index.html esta el id \n\n// //como ya tenemos este contenedor hacemos lo siguiente \n// container.appendChild(element)\n// //react es el unico elemento que esta en el html app\n// //react importa al html automaticamente\n// //en el inspector de elementos del chromo veremos unos elementos en el DOM que no estaban antes\n// //entonces 1: tenemos un elemento 2: tenemos un contenedor 3: lo estamos presentando en pantalla\n// //con este ejemplo no estamos usanddo react \n\n// //ACA USAREMOS LO MISMO USANDO REACT\n\nimport React from 'react'; //IMPORTAMOS REACT PORQUE VAMOS A UTILIZAR JSX\nimport ReactDom from 'react-dom';\n// estas dos herramientas de react van a trabajar en conjunto\n//el analogo de estas dos es el create element para el react, y el react DOM es es el analogo a apend child\n\nconst element = <h1>Hello</h1>; // este es el elemento y abajo creamos el contenedor\n//Hay una alternativa para la linea de codigo anterior 23 y es:\n// const element = document.createElement('h1',{}, 'hola! soy los children') //esto es lo mismo que arriba y lo que esta en es: {atributo}\nconst container = document.getElementById('app');\n// ReactDOM.render(__que__, __donde__); // este metodo render toma dos argumentos que y donde lo queremos renderizar\nReactDom.render(element, container); // ESTE ES EL ORDEN "]},"metadata":{},"sourceType":"module"}