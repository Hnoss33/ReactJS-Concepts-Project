{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/pages/BadgeNew.js\";\nimport React from 'react';\nimport '../pages/styles/BadgeNew.css';\nimport Header from '../images/output-onlinepngtools.png';\nimport Badge from '../components/Badge.js';\nimport BadgeForm from '../components/BadgeForm.js';\nimport PageLoading from '../components/PageLoading.js';\nimport api from '../api.js'; // aca traemos esta Api porque debemos hacer una llamada una vez el usuario haga el submit, recordad que abajo paramos el llamado con el manejo \n// import { Link } from 'react-router-dom';\n\nvar BadgeNew =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BadgeNew, _React$Component);\n\n  function BadgeNew() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BadgeNew);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BadgeNew)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      Loading: false,\n      //esto representa que se envian los datos \n      Error: null,\n      //el error es nulo, esto signufica que comenzamos sin error \n      Form: {\n        FirstName: '',\n        LastName: '',\n        Email: '',\n        JobTitle: '',\n        Twitter: ''\n      }\n    };\n\n    _this.handleChange = function (e) {\n      //handleChange() — that is used to set a new state for the input. //handleChange() function to set a new state for input */\n      _this.setState({\n        //https://es.reactjs.org/docs/faq-state.html Dcocumentacion para entender!\n        Form: _objectSpread({}, _this.state.Form, _defineProperty({}, e.target.name, e.target.value))\n      });\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // esto es la funcion que va a recibir un e osea un evento , estamos llamndo el API asi que debemos utilizar async y await porque es asincrono \n                e.preventDefault(); //y este evento lo debemos detener! porque el navegador va a enviar los datos a una pagina que no hemos especificado \n\n                _this.setState({\n                  Loading: true,\n                  Error: null\n                }); // como aca comienza el load debe ser en true y el error es null, abajo se maneja y se atrapa si algo sale mal \n\n\n                _context.prev = 2;\n                _context.next = 5;\n                return api.badges.create(_this.state.form);\n\n              case 5:\n                //aqui le estamos pasando los datos del nuevo badge que se esta creando lo tenemos guardado en this.state.form\n                _this.setState({\n                  Loading: false\n                }); //aca se detiene  el Loading una vez se envian los datos \n                //si lo anteriror ocurre queremos irnos del formulario regresamos a la lista de badges, asi que debemos usar uno de los props que las paginas reciben porque las paginas se las estamos dando a react router,\n                // la ruta pasa tres props match history y location en este caso estamos usando location, em este caso vamos usar history asi que redirigimos el usuario a badges \n\n\n                _this.props.history.push('/badges'); //con esto regresamos a badges una ves el recuest del formulario se haya completado \n\n\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  Loading: false,\n                  Error: _context.t0\n                }); //aca atrapamos el error osea que el Loading lo detenemos pasandole falso y guardamos el error que es igual a error \n\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 9]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(BadgeNew, [{\n    key: \"render\",\n    value: function render() {\n      // en el caso de que Loading se encienda osea sea true! queremos devolver el formulario la visualizacion osea el loader\n      if (this.state.Loading) {\n        //aca dice que si el Loading es true retornamos el componente \n        return React.createElement(PageLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"BadgeNew__hero\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"img-fluid\",\n        src: Header,\n        alt: \"Logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Badge, {\n        firstName: this.state.form.firstName || 'FISRT_NAME' //ACA EN ESTAS LINEAS VAMOS A DARLE UN VALOR POR OMISION con un condicional que es el || esto significa or, dice que si el valor anterior no existe entonces imprime lo que digamos \n        ,\n        lastName: this.state.form.lastName || 'LAST_NAME',\n        jobTitle: this.state.form.jobTitle || 'Twitter',\n        twitter: this.state.form.twitter || 'JOB_TITLE',\n        email: this.state.form.email || 'EMAIL',\n        AvatarURL: \"https://www.gravatar.com/avatar/e79975d3c8ba4392890e18143730eb0c?s=300\" // PARA CAMBIAR ESTE AVATAR DEBEMOS HACERLO EN BADGE.JS\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(BadgeForm, {\n        onChange: this.handleChange,\n        onSubmit: this.handleSubmit //aca manejamos el submit del form y debemos asegurarnos de que cuando el form se envie llamemos el prop del componente BadgeForm\n        ,\n        formValues: this.state.form,\n        error: this.state.error //añadimos este prop a badgeform para generar el error cuando lo tome el catch, todo depende de que esta guardado en  this.state.error \n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return BadgeNew;\n}(React.Component); //https://es.reactjs.org/docs/fragments.html  (React.Fragment)\n\n\nexport default BadgeNew;","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/pages/BadgeNew.js"],"names":["React","Header","Badge","BadgeForm","PageLoading","api","BadgeNew","state","Loading","Error","Form","FirstName","LastName","Email","JobTitle","Twitter","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","badges","create","form","props","history","push","firstName","lastName","jobTitle","twitter","email","error","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../pages/styles/BadgeNew.css';\nimport Header from '../images/output-onlinepngtools.png';\nimport Badge from '../components/Badge.js';\nimport BadgeForm from '../components/BadgeForm.js';\nimport PageLoading from '../components/PageLoading.js';\n\nimport api from '../api.js'; // aca traemos esta Api porque debemos hacer una llamada una vez el usuario haga el submit, recordad que abajo paramos el llamado con el manejo \n// import { Link } from 'react-router-dom';\n\n\n\nclass BadgeNew extends React.Component {\n  state = {\n    Loading: false, //esto representa que se envian los datos \n    Error: null, //el error es nulo, esto signufica que comenzamos sin error \n    Form: {\n      FirstName: '',\n      LastName: '',\n      Email: '',\n      JobTitle: '',\n      Twitter: '',\n    },\n  };\n\n  handleChange = e => {  //handleChange() — that is used to set a new state for the input. //handleChange() function to set a new state for input */\n    this.setState({ //https://es.reactjs.org/docs/faq-state.html Dcocumentacion para entender!\n      Form: {\n        ...this.state.Form, //cuando hacemos esto aca dejamos caer todos los valores del state form\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  handleSubmit = async e => { // esto es la funcion que va a recibir un e osea un evento , estamos llamndo el API asi que debemos utilizar async y await porque es asincrono \n        e.preventDefault(); //y este evento lo debemos detener! porque el navegador va a enviar los datos a una pagina que no hemos especificado \n        this.setState({Loading: true, Error: null })// como aca comienza el load debe ser en true y el error es null, abajo se maneja y se atrapa si algo sale mal \n        try {\n           await api.badges.create(this.state.form) //aqui le estamos pasando los datos del nuevo badge que se esta creando lo tenemos guardado en this.state.form\n           this.setState({Loading: false}) //aca se detiene  el Loading una vez se envian los datos \n//si lo anteriror ocurre queremos irnos del formulario regresamos a la lista de badges, asi que debemos usar uno de los props que las paginas reciben porque las paginas se las estamos dando a react router,\n// la ruta pasa tres props match history y location en este caso estamos usando location, em este caso vamos usar history asi que redirigimos el usuario a badges \n            this.props.history.push('/badges'); //con esto regresamos a badges una ves el recuest del formulario se haya completado \n\n          } catch (Error){ \n          this.setState({Loading: false, Error: Error }) //aca atrapamos el error osea que el Loading lo detenemos pasandole falso y guardamos el error que es igual a error \n        }\n      \n      };\n\n      render() { // en el caso de que Loading se encienda osea sea true! queremos devolver el formulario la visualizacion osea el loader\nif (this.state.Loading) { //aca dice que si el Loading es true retornamos el componente \n  return <PageLoading />;\n}\n    return (\n      <React.Fragment>\n     \n        {/* <Navbar/> esto ya se esta compartiendo desde el archivo layout */}\n        <div className =\"BadgeNew__hero\">\n            <img className=\"img-fluid\" src={Header} alt=\"Logo\"/>\n        </div>\n        <div className= \"container\">\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <Badge \n                     firstName = {this.state.form.firstName || 'FISRT_NAME'} //ACA EN ESTAS LINEAS VAMOS A DARLE UN VALOR POR OMISION con un condicional que es el || esto significa or, dice que si el valor anterior no existe entonces imprime lo que digamos \n                     lastName = {this.state.form.lastName || 'LAST_NAME'} \n                     jobTitle = {this.state.form.jobTitle ||'Twitter'} \n                     twitter = {this.state.form.twitter || 'JOB_TITLE'} \n                     email= {this.state.form.email|| 'EMAIL'} \n                     AvatarURL = \"https://www.gravatar.com/avatar/e79975d3c8ba4392890e18143730eb0c?s=300\" // PARA CAMBIAR ESTE AVATAR DEBEMOS HACERLO EN BADGE.JS\n                     /> \n                     </div>\n              <div className=\"col-6\">\n              <BadgeForm\n                onChange={this.handleChange}\n                onSubmit={this.handleSubmit} //aca manejamos el submit del form y debemos asegurarnos de que cuando el form se envie llamemos el prop del componente BadgeForm\n                formValues={this.state.form}\n                error={this.state.error} //añadimos este prop a badgeform para generar el error cuando lo tome el catch, todo depende de que esta guardado en  this.state.error \n              />\n            </div>\n          </div>\n        </div>\n        </React.Fragment> \n        \n    );\n  }\n}\n//https://es.reactjs.org/docs/fragments.html  (React.Fragment)\nexport default BadgeNew;"]},"metadata":{},"sourceType":"module"}