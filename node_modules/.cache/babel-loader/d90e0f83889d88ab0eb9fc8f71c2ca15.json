{"ast":null,"code":"import _classCallCheck from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/components/BadgeForm.js\";\nimport React from 'react';\n\nvar BadgeForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BadgeForm, _React$Component);\n\n  function BadgeForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BadgeForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BadgeForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClick = function (e) {\n      //manejador del evento al escribir, este metodo recibe el evento  \n      console.log(\"Button was clicked\");\n    };\n\n    _this.handleSubmit = function (e) {\n      //manejador de evento al hacer click, Los elementos button también tienen un evento que es onClick.\n      e.preventDefault();\n      console.log(\"form was submitted\");\n      console.log(_this.state); //con esto imprimimos todo el estado (la info)\n    };\n\n    return _this;\n  }\n\n  _createClass(BadgeForm, [{\n    key: \"render\",\n    //Cuando hay un botón dentro de un formulario, este automáticamente será de \n    //tipo submit. Si no queremos que pase así hay dos maneras de evitarlo: especificando que su valor es de tipo button o manejándolo \n    //desde el formulario cuando ocurre el evento onSubmit.\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"New Attendant\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"firstName\",\n        value: this.props.formValues.firstName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"lastName\",\n        value: this.props.formValues.lastName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"email\",\n        name: \"email\",\n        value: this.props.formValues.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Job Title\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"jobTitle\",\n        value: this.props.formValues.jobTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Twitter\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"twitter\",\n        value: this.props.formValues.twitter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Save\")));\n    }\n  }]);\n\n  return BadgeForm;\n}(React.Component);\n\nexport default BadgeForm; // render(){\n//     return (\n//         <div>\n//             <h1>New Attendant</h1>\n// <form onSubmit={this.handleSubmit}> {/* con esto todos los imput ahora van a usuar el prop onchange */}\n//     <div className=\"form-group\">\n//     <label>First Name</label>\n//     <input \n//     onChange={this.props.onChange}\n//      className=\"form-control\" \n//      type=\"text\"\n//      name=\"firstName\"\n//      value={this.props.formValues.firstName} //esto es para leer el estado y controlar la info, en este caso this.props.formValues.firstName leemos el first name \n//      />\n//     </div>\n//     <div className=\"form-group\">\n//     <label>Last Name</label>\n//     <input \n//     onChange={this.props.onChange} \n//     className=\"form-control\" \n//     type=\"text\" \n//     name=\"lastName\"\n//     value={this.props.formValues.lastName}\n//     />\n//     </div>\n//     <div className=\"form-group\">\n//     <label>Email</label>\n//     <input \n//     onChange={this.props.onChange} \n//     className=\"form-control\" \n//     type=\"text\" \n//     name=\"email\"\n//     value={this.props.formValues.email}\n//     />\n//     </div>\n//     <div className=\"form-group\">\n//     <label>Job Title</label>\n//     <input \n//     onChange={this.props.onChange} \n//     className=\"form-control\" \n//     type=\"text\" \n//     name=\"jobTitle\"\n//     value={this.props.formValues.jobTitle}\n//     />\n//     </div>\n//     <div className=\"form-group\">\n//     <label>Twitter</label>\n//     <input \n//     onChange={this.props.onChange} \n//     className=\"form-control\" \n//     type=\"text\" \n//     name=\"twitter\"\n//     value={this.props.formValues.twitter}\n//     />\n//     </div>\n//             <button onClick={this.handleClick} className= \"btn btn-primary\">Save</button>\n//                 </form>\n//             </div>\n//         );\n//     }\n// }\n// export default badgeForm;","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/components/BadgeForm.js"],"names":["React","BadgeForm","handleClick","e","console","log","handleSubmit","preventDefault","state","props","onChange","formValues","firstName","lastName","email","jobTitle","twitter","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n\nclass BadgeForm extends React.Component {\n    // state = {} //con este estado vacio podemos ver. LA INFORMACION SE QUEDA ACA Y QUEREMOS COMPARTIRLA\n    handleClick = e => { //manejador del evento al escribir, este metodo recibe el evento  \n        console.log(\"Button was clicked\");\n       };\n//este simbolo {e} es un veneto sintetico abajo en el metodo\n       handleSubmit = e => { //manejador de evento al hacer click, Los elementos button también tienen un evento que es onClick.\n        e.preventDefault();\n        console.log(\"form was submitted\");\n        console.log(this.state); //con esto imprimimos todo el estado (la info)\n        };\n//Cuando hay un botón dentro de un formulario, este automáticamente será de \n//tipo submit. Si no queremos que pase así hay dos maneras de evitarlo: especificando que su valor es de tipo button o manejándolo \n//desde el formulario cuando ocurre el evento onSubmit.\nrender() {\n    return (\n      <div>\n        <h1>New Attendant</h1>\n\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label>First Name</label>\n            <input\n              onChange={this.props.onChange}\n              className=\"form-control\"\n              type=\"text\"\n              name=\"firstName\"\n              value={this.props.formValues.firstName}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Last Name</label>\n            <input\n              onChange={this.props.onChange}\n              className=\"form-control\"\n              type=\"text\"\n              name=\"lastName\"\n              value={this.props.formValues.lastName}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Email</label>\n            <input\n              onChange={this.props.onChange}\n              className=\"form-control\"\n              type=\"email\"\n              name=\"email\"\n              value={this.props.formValues.email}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Job Title</label>\n            <input\n              onChange={this.props.onChange}\n              className=\"form-control\"\n              type=\"text\"\n              name=\"jobTitle\"\n              value={this.props.formValues.jobTitle}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Twitter</label>\n            <input\n              onChange={this.props.onChange}\n              className=\"form-control\"\n              type=\"text\"\n              name=\"twitter\"\n              value={this.props.formValues.twitter}\n            />\n          </div>\n          <button onClick={this.handleClick} className=\"btn btn-primary\">\n            Save\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\nexport default BadgeForm;\n\n    // render(){\n    //     return (\n    //         <div>\n    //             <h1>New Attendant</h1>\n    // <form onSubmit={this.handleSubmit}> {/* con esto todos los imput ahora van a usuar el prop onchange */}\n        \n    //     <div className=\"form-group\">\n    //     <label>First Name</label>\n    //     <input \n    //     onChange={this.props.onChange}\n    //      className=\"form-control\" \n    //      type=\"text\"\n    //      name=\"firstName\"\n    //      value={this.props.formValues.firstName} //esto es para leer el estado y controlar la info, en este caso this.props.formValues.firstName leemos el first name \n    //      />\n    //     </div>\n\n    //     <div className=\"form-group\">\n    //     <label>Last Name</label>\n    //     <input \n    //     onChange={this.props.onChange} \n    //     className=\"form-control\" \n    //     type=\"text\" \n    //     name=\"lastName\"\n    //     value={this.props.formValues.lastName}\n    //     />\n    //     </div>\n\n    //     <div className=\"form-group\">\n    //     <label>Email</label>\n    //     <input \n    //     onChange={this.props.onChange} \n    //     className=\"form-control\" \n    //     type=\"text\" \n    //     name=\"email\"\n    //     value={this.props.formValues.email}\n    //     />\n    //     </div>\n\n    //     <div className=\"form-group\">\n    //     <label>Job Title</label>\n    //     <input \n    //     onChange={this.props.onChange} \n    //     className=\"form-control\" \n    //     type=\"text\" \n    //     name=\"jobTitle\"\n    //     value={this.props.formValues.jobTitle}\n    //     />\n    //     </div>\n\n    //     <div className=\"form-group\">\n    //     <label>Twitter</label>\n    //     <input \n    //     onChange={this.props.onChange} \n    //     className=\"form-control\" \n    //     type=\"text\" \n    //     name=\"twitter\"\n    //     value={this.props.formValues.twitter}\n    //     />\n    //     </div>\n\n//             <button onClick={this.handleClick} className= \"btn btn-primary\">Save</button>\n//                 </form>\n//             </div>\n//         );\n//     }\n// }\n\n// export default badgeForm;\n\n"]},"metadata":{},"sourceType":"module"}