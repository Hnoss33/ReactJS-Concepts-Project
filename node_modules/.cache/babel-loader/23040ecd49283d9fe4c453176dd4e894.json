{"ast":null,"code":"var _jsxFileName = \"/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/index.js\";\n//ESTO ES UN EJEMPLO SIN USAR REACT\n// const  element = document.createElement('h1'); // esto crea un elemento en el H1 \n// element.innerText = \"Hello\"; // aca indicamos que vamos a crear un texto\n// const container = document.getElementById('app');//aca es donde debemos poner esto ya que en el index.html esta el id \n// //como ya tenemos este contenedor hacemos lo siguiente \n// container.appendChild(element)\n// //react es el unico elemento que esta en el html app\n// //react importa al html automaticamente\n// //en el inspector de elementos del chromo veremos unos elementos en el DOM que no estaban antes\n// //entonces 1: tenemos un elemento 2: tenemos un contenedor 3: lo estamos presentando en pantalla\n// //con este ejemplo no estamos usanddo react \n// //ACA USAREMOS LO MISMO USANDO REACT\nimport React from 'react'; //IMPORTAMOS REACT PORQUE VAMOS A UTILIZAR JSX\n\nimport ReactDom from 'react-dom'; // estas dos herramientas de react van a trabajar en conjunto\n//el analogo de estas dos es el create element para el react, y el react DOM es es el analogo a apend child\n// const element = <h1>Hello</h1>; // este es el elemento y abajo creamos el contenedor\n// //Hay una alternativa para la linea de codigo anterior 23 y es:\n// // const element = document.createElement('h1',{}, 'hola! soy los children') //esto es lo mismo que arriba y lo que esta en es: {atributo}\n// const container = document.getElementById('app');\n// // ReactDOM.render(__que__, __donde__); // este metodo render toma dos argumentos que y donde lo queremos renderizar\n// ReactDom.render(element, container); // ESTE ES EL ORDEN \n//ACA TRABAJAREMOS CON ALGO QUE TENGA UN ATRIBUTO POR EJEMPLO LOS 'a' {en el html} => ESTOS TIENEN EL 'href'\n// const jsx = <h1>Hola</h1>;\n// const element = React.createElement('a',{ href: 'https://github.com/Hnoss33'}, 'My Github'); \n// const name = 'jose';\n// const jsx = <h1>Hola soy, {name}</h1>; //Esto que esta entre llaves nos permite introducir variables o de una forma generica nos permite introducir expreciones de javascript\n// //aca adentro {......} no solo es variables es una exprecion : algo que se evalua y se interpreta, \n// const sum = () => 3 + 3; //aca sum es igual a una funcion () que dice 3 + 3 y la llamamos en la linea 37 con los corchetes que estan dentro del H1\n// const jsx = <h1>Hola soy, {sum()}</h1>;//podemos llamar otra funcion desde aca \n// //sea lo que sea que esta adentro de los corchetes se va a evaluar y se muestra en pantalla\n// // const element = React.createElement('h1',{}, `hola, soy ${name}`)// aca introducimos una variable dentro de todo el contenido la lin ea 34 desabilita esta forma\n// const container = document.getElementById('app');\n// ReactDom.render(jsx, container); //aca quitamos element para solo llamar jsx\n//TAMBIEN PODEMOS HACERLO DE LA SIGUIENTE MANERA \n\nvar jsx = // aca esta vez introducimos un contenedor con contenido , esto es JSX  es mejor !!!!\nReact.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}, \"Hola, soy Horacio\"), React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}, \"This is a test\")); //podemos hacer esto mismo de arriba con react.element pero es mas largo y cpmplicado , aca se llama funcion con argumentos create element cn otros argumentos\n// const element = React.createElement(\n//     'div',\n//     {},\n//     React.createElement('h1', {}, 'Hola'),\n//     React.createElement('p', {}, 'this is a test')\n// );\n\nvar container = document.getElementById('app'); // ReactDom.render(element, container); // este es para la linea 54\n\nReactDom.render(jsx, container);","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/ReactJS-Project/platzi-badges/src/index.js"],"names":["React","ReactDom","jsx","container","document","getElementById","render"],"mappings":";AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AAEA,IAAMC,GAAG,GAAK;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADA,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAlB,C,CACA;;AACAJ,QAAQ,CAACK,MAAT,CAAgBJ,GAAhB,EAAqBC,SAArB","sourcesContent":["//ESTO ES UN EJEMPLO SIN USAR REACT\n// const  element = document.createElement('h1'); // esto crea un elemento en el H1 \n\n// element.innerText = \"Hello\"; // aca indicamos que vamos a crear un texto\n\n// const container = document.getElementById('app');//aca es donde debemos poner esto ya que en el index.html esta el id \n\n// //como ya tenemos este contenedor hacemos lo siguiente \n// container.appendChild(element)\n// //react es el unico elemento que esta en el html app\n// //react importa al html automaticamente\n// //en el inspector de elementos del chromo veremos unos elementos en el DOM que no estaban antes\n// //entonces 1: tenemos un elemento 2: tenemos un contenedor 3: lo estamos presentando en pantalla\n// //con este ejemplo no estamos usanddo react \n\n// //ACA USAREMOS LO MISMO USANDO REACT\n\nimport React from 'react'; //IMPORTAMOS REACT PORQUE VAMOS A UTILIZAR JSX\nimport ReactDom from 'react-dom';\n// estas dos herramientas de react van a trabajar en conjunto\n//el analogo de estas dos es el create element para el react, y el react DOM es es el analogo a apend child\n\n// const element = <h1>Hello</h1>; // este es el elemento y abajo creamos el contenedor\n// //Hay una alternativa para la linea de codigo anterior 23 y es:\n// // const element = document.createElement('h1',{}, 'hola! soy los children') //esto es lo mismo que arriba y lo que esta en es: {atributo}\n// const container = document.getElementById('app');\n// // ReactDOM.render(__que__, __donde__); // este metodo render toma dos argumentos que y donde lo queremos renderizar\n// ReactDom.render(element, container); // ESTE ES EL ORDEN \n\n//ACA TRABAJAREMOS CON ALGO QUE TENGA UN ATRIBUTO POR EJEMPLO LOS 'a' {en el html} => ESTOS TIENEN EL 'href'\n// const jsx = <h1>Hola</h1>;\n// const element = React.createElement('a',{ href: 'https://github.com/Hnoss33'}, 'My Github'); \n// const name = 'jose';\n// const jsx = <h1>Hola soy, {name}</h1>; //Esto que esta entre llaves nos permite introducir variables o de una forma generica nos permite introducir expreciones de javascript\n// //aca adentro {......} no solo es variables es una exprecion : algo que se evalua y se interpreta, \n// const sum = () => 3 + 3; //aca sum es igual a una funcion () que dice 3 + 3 y la llamamos en la linea 37 con los corchetes que estan dentro del H1\n// const jsx = <h1>Hola soy, {sum()}</h1>;//podemos llamar otra funcion desde aca \n// //sea lo que sea que esta adentro de los corchetes se va a evaluar y se muestra en pantalla\n// // const element = React.createElement('h1',{}, `hola, soy ${name}`)// aca introducimos una variable dentro de todo el contenido la lin ea 34 desabilita esta forma\n// const container = document.getElementById('app');\n\n// ReactDom.render(jsx, container); //aca quitamos element para solo llamar jsx\n\n\n//TAMBIEN PODEMOS HACERLO DE LA SIGUIENTE MANERA \n\nconst jsx = ( // aca esta vez introducimos un contenedor con contenido , esto es JSX  es mejor !!!!\n<div>\n    <h1>Hola, soy Horacio</h1>\n    <p>This is a test</p>\n</div>\n);\n//podemos hacer esto mismo de arriba con react.element pero es mas largo y cpmplicado , aca se llama funcion con argumentos create element cn otros argumentos\n// const element = React.createElement(\n//     'div',\n//     {},\n//     React.createElement('h1', {}, 'Hola'),\n//     React.createElement('p', {}, 'this is a test')\n// );\nconst container = document.getElementById('app')\n// ReactDom.render(element, container); // este es para la linea 54\nReactDom.render(jsx, container);\n"]},"metadata":{},"sourceType":"module"}